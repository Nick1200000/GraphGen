# name: Build and Push Docker image

# on:
#   push:
#     branches:
#       - main
#       - enhancement/**  # optional: builds on enhancement branches too
#   pull_request:

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout source code
#         uses: actions/checkout@v3

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2

#       - name: Log in to Docker Hub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Build and push Docker image
#         uses: docker/build-push-action@v5
#         with:
#           context: .
#           push: true
#           tags: nikhil635/graphgen-ai:latest

name: Build, Push, and Scan Docker Image

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger the workflow for version tags like v1.0.0, v2.0.1 etc.
    branches:
      - main
      - enhancement/**
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set_tag.outputs.image_tag }}

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Set image tag
        id: set_tag
        run: |
          # Get the tag from GitHub and use it as the image version
          echo "image_tag=nikhil635/graphgen-ai:${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV  # Dynamic version tag
          echo "image_tag=nikhil635/graphgen-ai:${GITHUB_REF#refs/tags/}"  # To make sure it's printed

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.image_tag }}  # Use dynamic tag like v1.1.0

  scan:
    name: Scan Docker Image with Trivy
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Install Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.image_tag }}  # Use the dynamic versioned image tag
          format: 'table'
          exit-code: '0'  # Set to '1' if you want to fail on vulnerabilities
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

